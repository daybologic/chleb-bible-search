#!/usr/bin/env bash
# Chleb Bible Search
# Copyright (c) 2024-2025, Rev. Duncan Ross Palmer (M6KVM, 2E0EOL),
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#     * Redistributions of source code must retain the above copyright notice,
#       this list of conditions and the following disclaimer.
#
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#
#     * Neither the name of the Daybo Logic nor the names of its contributors
#       may be used to endorse or promote products derived from this software
#       without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

set -eo pipefail

set -u

# Ignominious exit if we're not the Git repo
git -C . rev-parse 2>/dev/null

branchTypes=(bugfix docs feature hotfix maint platform private refactor tests rel)

function listBranchTypes() {
	i=1
	for supportedBranchType in "${branchTypes[@]}"; do
		printf "%d) %s\n" $i "$supportedBranchType"
		((i++))
	done
}

function askDescription() {
	echo
	echo "What is the name of the branch or a description?"
	echo "You can specify a loose description and we'll coerce it, or just a basic few words"
	echo "eg. branch-name"
	echo "eh. my branch 123"
	echo
	echo "You must not specify the kind of branch nor anything containing a forward-slash"
	echo "but we'll coerce what we can."
	echo
	while true; do
		read -r -p 'branch name: ' branchDescription
		if [ -z "$branchDescription" ]; then
			>&2 echo "aborted"
			exit 2
		fi
		branchName=$(echo "$branchDescription" | tr '[:upper:]' '[:lower:]' | tr -s ' ' '-')
		branchName=$(echo "$branchName" | LC_CTYPE=C iconv -c -f utf8 -t ascii)
		branchName=$(echo "$branchName" | sed 's/[^a-zA-Z0-9]/-/g')
		branchName=$(echo "$branchName" | tr -s '-')
		maxlen=40
		branchName="${branchName:0:maxlen}"
		branchName="${branchName%%-}"
		branchName="${branchName##-}"

		if [[ -z "$branchName" ]]; then
			>&2 echo "ERROR: The specified description can't be rendered into a string of any length, please try again"
			continue
		fi

		while true; do
			printf "Does '%s' seem cromulent? " "$branchName"
			read -r confirm
			if [[ ! -z "$confirm" ]]; then
				case "$confirm" in
					[Yy]*)
						break 2
						;;
					[Nn]*)
						echo 'OK, please think up another branch description'
						break
						;;
					*)
						>&2 echo 'ERROR: Please specify yes or no'
						continue
						;;
				esac
			fi
		done
	done
}


echo "What kind of branch do you want?"
echo "You can specify the index of the option, or the option by name"
echo "do not specify the full branch name here, just the kind"
echo
while true; do
	listBranchTypes

	read -r -p 'What kind of branch (empty to exit)? ' branchType
	if [[ -z "$branchType" ]]; then
		>&2 echo "aborted"
		exit 2
	fi

	if [[ "$branchType" =~ ^[0-9]+$ ]]; then
		itemCount="${#branchTypes[@]}"
		((branchType--))
		if (( branchType >= 0 && branchType < ${#branchTypes[@]} )); then
			branchType="${branchTypes[$branchType]}"
			echo "$branchType"
			break 2
		fi
	else
		for supportedBranchType in "${branchTypes[@]}"; do
			if [[ "$supportedBranchType" == "$branchType" ]]; then
				break 2
			fi
		done
	fi

	>&2 printf "ERROR: '%s' is not supported\n\n" "$branchType"
done

case "$branchType" in
	platform)
		>&2 printf "ERROR: For '%s' branch types, please make the branch by hand for now\n\n" "$branchType"
		;;
	rel)
		>&2 echo "ERROR: this is the wrong tool for performing releases, we don't presently have a release tool but this will appear very soon"
		;;
	docs|feature|bugfix|hotfix|maint|private|refactor|tests)   # multiple matches
		askDescription
		;;
	*)
		# default case (like "else")
		>&2 printf "ERROR: '%s' is not supported properly in strategy block (inform developer)\n\n" "$branchType"
		;;
esac

iteration=1
fullBranchName="${branchType}/${branchName}/${iteration}"
echo "${fullBranchName}"

git stash push
git switch develop
git checkout -b "${fullBranchName}"
